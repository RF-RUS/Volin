import React, { useState, useRef } from 'react';
import { CarSelector } from './CarSelector';

interface Order {
  id: string;
  date: string;
  client: string;
  contacts: string;
  car: string;
  vin: string;
  regnum: string;
  executor: string;
  orderNumber: string;
  frontSuspensionType: string;
  rearSuspensionType: string;
  status: 'pending' | 'in_progress' | 'completed';
  created: string;
  completedAt?: string;
}

interface ManagerInterfaceProps {
  onBackToRoles: () => void;
}

export function ManagerInterface({ onBackToRoles }: ManagerInterfaceProps) {
  const [activeTab, setActiveTab] = useState<'create' | 'orders' | 'completed'>('create');
  const [orders, setOrders] = useState<Order[]>(() => {
    const saved = localStorage.getItem('orders');
    return saved ? JSON.parse(saved) : [];
  });
  const [carData, setCarData] = useState({
    car: '',
    frontSuspensionType: '',
    rearSuspensionType: ''
  });
  const [showNotification, setShowNotification] = useState(false);
  const [completedOrdersCount, setCompletedOrdersCount] = useState(0);
  const formRef = useRef<HTMLFormElement>(null);

  const executors = [
    '–ò–≤–∞–Ω–æ–≤ –ò.–ò.',
    '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.',
    '–°–∏–¥–æ—Ä–æ–≤ –°.–°.',
    '–ö–æ–∑–ª–æ–≤ –ö.–ö.'
  ];

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  React.useEffect(() => {
    function loadOrders() {
      const saved = localStorage.getItem('orders');
      const loadedOrders: Order[] = saved ? JSON.parse(saved) : [];
      
      const completedOrders = loadedOrders.filter(o => o.status === 'completed');
      const newCompletedCount = completedOrders.length - orders.filter(o => o.status === 'completed').length;
      
      if (newCompletedCount > 0 && orders.length > 0) {
        setShowNotification(true);
        setCompletedOrdersCount(newCompletedCount);
        // –ó–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        playNotificationSound();
        // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => setShowNotification(false), 10000);
      }
      
      setOrders(loadedOrders);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    const interval = setInterval(loadOrders, 3000);
    
    return () => clearInterval(interval);
  }, [orders]);

  function playNotificationSound() {
    try {
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      oscillator.frequency.setValueAtTime(600, audioContext.currentTime);
      oscillator.frequency.setValueAtTime(800, audioContext.currentTime + 0.3);
      oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.6);
      
      gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.8);
      
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.8);
    } catch (error) {
      console.log('–ó–≤—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    }
  }

  function handleCarSelect(selectedCarData: { car: string; frontSuspensionType: string; rearSuspensionType: string }) {
    setCarData(selectedCarData);
  }

  function handleCreateOrder(e: React.FormEvent) {
    e.preventDefault();
    const form = formRef.current;
    if (!form) return;

    const formData = new FormData(form);
    const newOrder: Order = {
      id: Date.now().toString(),
      date: formData.get('date') as string,
      client: formData.get('client') as string,
      contacts: formData.get('contacts') as string,
      car: carData.car,
      vin: formData.get('vin') as string,
      regnum: formData.get('regnum') as string,
      executor: formData.get('executor') as string,
      orderNumber: formData.get('orderNumber') as string,
      frontSuspensionType: carData.frontSuspensionType,
      rearSuspensionType: carData.rearSuspensionType,
      status: 'pending',
      created: new Date().toISOString()
    };

    const updatedOrders = [...orders, newOrder];
    setOrders(updatedOrders);
    localStorage.setItem('orders', JSON.stringify(updatedOrders));

    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    alert(`‚úÖ –ó–∞–∫–∞–∑ ${newOrder.orderNumber} —Å–æ–∑–¥–∞–Ω!\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: ${newOrder.executor}`);
    
    form.reset();
    setCarData({ car: '', frontSuspensionType: '', rearSuspensionType: '' });
    setActiveTab('orders');
  }

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–≤–µ—Å–æ–∫ –¥–ª—è –ø–µ—á–∞—Ç–∏
  const FRONT_PARAMS = [
    '–ü–µ—Ä–µ–¥–Ω–∏–µ –∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã', '–ü—ã–ª—å–Ω–∏–∫–∏ / –æ—Ç–±–æ–π–Ω–∏–∫–∏', '–û–ø–æ—Ä—ã –∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤', 
    '–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏ –∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤', '–ü—Ä—É–∂–∏–Ω—ã –∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤', '–ü—Ä–∏–≤–æ–¥ / –®–†–£–° / –ü—ã–ª—å–Ω–∏–∫', 
    '–†—É–ª–µ–≤–æ–π –Ω–∞–∫–æ–Ω–µ—á–Ω–∏–∫/–ø—ã–ª—å–Ω–∏–∫', '–†—É–ª–µ–≤–∞—è —Ç—è–≥–∞/–ø—ã–ª—å–Ω–∏–∫', '–†—É–ª–µ–≤–∞—è —Ä–µ–π–∫–∞', 
    '–†—ã—á–∞–≥–∏ –ø–æ–¥–≤–µ—Å–∫–∏ –Ω–∏–∂–Ω–∏–µ/–≤–µ—Ä—Ö–Ω–∏–µ', '–°–∞–π–ª–µ–Ω—Ç–±–ª–æ–∫–∏ –ø–µ—Ä–µ–¥/–∑–∞–¥–Ω–∏–µ', '–°—Ç–æ–π–∫–∏/–≤—Ç—É–ª–∫–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞', 
    '–°—Ç—É–ø–∏—á–Ω—ã–π –ø–æ–¥—à–∏–ø–Ω–∏–∫', '–¢–æ—Ä–º–æ–∑–Ω—ã–µ –¥–∏—Å–∫–∏', '–¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏', '–¢–æ—Ä–º–æ–∑–Ω—ã–µ —à–ª–∞–Ω–≥–∏/—Ç—Ä—É–±–∫–∏', 
    '–†–µ–º-–∫–æ–º–ø–ª–µ–∫—Ç —Å—É–ø–ø–æ—Ä—Ç–æ–≤/–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞', '–¢—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ —Ç–æ—Ä–º–æ–∑–∞', '–®–∏–Ω—ã/–∫–æ–ª–µ—Å–Ω—ã–π –¥–∏—Å–∫ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ)', 
    '–®–∏–Ω—ã/–∫–æ–ª–µ—Å–Ω—ã–π –¥–∏—Å–∫ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)', '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ–ª—â–∏–Ω–∞ –¥–∏—Å–∫–∞ (–º–º), –º–∏–Ω–∏–º—É–º (–º–º)', 
    '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ–ª—â–∏–Ω–∞ –∫–æ–ª–æ–¥–∫–∏ (–º–º), –º–∏–Ω–∏–º—É–º (–º–º)'
  ];

  const REAR_PARAMS = [
    '–ó–∞–¥–Ω–∏–µ –∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã', '–ü—ã–ª—å–Ω–∏–∫–∏ / –æ—Ç–±–æ–π–Ω–∏–∫–∏', '–û–ø–æ—Ä—ã –∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤', 
    '–ü—Ä—É–∂–∏–Ω—ã / —Ä–µ—Å—Å–æ—Ä—ã', '–°—Ç–æ–π–∫–∏/–≤—Ç—É–ª–∫–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞', '–†—ã—á–∞–≥–∏ –ø–æ–¥–≤–µ—Å–∫–∏ –≤–≤–µ—Ä—Ö/–Ω–∏–∑', 
    '–®–∞—Ä–æ–≤—ã–µ –æ–ø–æ—Ä—ã –Ω–∏–∂–Ω–∏–µ/–≤–µ—Ä—Ö–Ω–∏–µ', '–°—Ç—É–ø–∏—á–Ω—ã–π –ø–æ–¥—à–∏–ø–Ω–∏–∫', '–°–∞–π–ª–µ–Ω—Ç–±–ª–æ–∫–∏ –ø–æ–¥—Ä–∞–º–Ω–∏–∫–∞', 
    '–¢—è–≥–∏ –ø–æ–ø–µ—Ä–µ—á–Ω—ã–µ/–ø—Ä–æ–¥–æ–ª—å–Ω—ã–µ', '–ö–∞—Ä–¥–∞–Ω-–≤–∞–ª / –∫—Ä–µ—Å—Ç–æ–≤–∏–Ω—ã / –®–†–£–°', '–¢–æ—Ä–º–æ–∑–Ω—ã–µ –¥–∏—Å–∫–∏/–±–∞—Ä–∞–±–∞–Ω—ã', 
    '–¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏', '–¢–æ—Ä–º–æ–∑–Ω—ã–µ —à–ª–∞–Ω–≥–∏/—Ç—Ä—É–±–∫–∏', '–†–µ–º-–∫–æ–º–ø–ª–µ–∫—Ç —Å—É–ø–ø–æ—Ä—Ç–æ–≤/–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞', 
    '–¢—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ —Ç–æ—Ä–º–æ–∑–∞', '–®–∏–Ω—ã/–∫–æ–ª–µ—Å–Ω—ã–π –¥–∏—Å–∫ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ)', '–®–∏–Ω—ã/–∫–æ–ª–µ—Å–Ω—ã–π –¥–∏—Å–∫ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)', 
    '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ–ª—â–∏–Ω–∞ –¥–∏—Å–∫–∞ (–º–º), –º–∏–Ω–∏–º—É–º (–º–º)', '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ–ª—â–∏–Ω–∞ –∫–æ–ª–æ–¥–∫–∏ (–º–º), –º–∏–Ω–∏–º—É–º (–º–º)'
  ];

  function getStatusText(status: string) {
    switch (status) {
      case 'ok': return '‚úÖ –û–ö';
      case 'recommendation': return '‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è';
      case 'replacement': return '‚ùå –ó–∞–º–µ–Ω–∞';
      default: return '‚Äî';
    }
  }

  function getFrontSuspensionRows(orderDiag: any) {
    return FRONT_PARAMS.map((param, idx) => `
      <tr>
        <td>${param}</td>
        <td>${getStatusText(orderDiag[`front_left_${idx}`] || '')}</td>
        <td>${getStatusText(orderDiag[`front_right_${idx}`] || '')}</td>
        <td>${orderDiag[`front_comment_${idx}`] || '‚Äî'}</td>
      </tr>
    `).join('');
  }

  function getRearSuspensionRows(orderDiag: any) {
    return REAR_PARAMS.map((param, idx) => `
      <tr>
        <td>${param}</td>
        <td>${getStatusText(orderDiag[`rear_left_${idx}`] || '')}</td>
        <td>${getStatusText(orderDiag[`rear_right_${idx}`] || '')}</td>
        <td>${orderDiag[`rear_comment_${idx}`] || '‚Äî'}</td>
      </tr>
    `).join('');
  }

  function handlePrintDiagnostics(order: Order) {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏–∑ localStorage
    const diagHistory = JSON.parse(localStorage.getItem('diag_history') || '[]');
    const orderDiag = diagHistory.find((diag: any) => 
      diag.client === order.client && diag.car === order.car
    );
    
    if (orderDiag) {
      // –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –ø–µ—á–∞—Ç–∏ —Å –ø–æ–ª–Ω—ã–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–º –ª–∏—Å—Ç–æ–º
      const printWindow = window.open('', '_blank');
      if (printWindow) {
        printWindow.document.write(`
          <!DOCTYPE html>
          <html>
            <head>
              <title>–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–∏—Å—Ç - ${order.orderNumber}</title>
              <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #348ECC; padding-bottom: 20px; }
                .order-info { background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
                .section { margin-bottom: 25px; }
                .section-title { font-size: 1.2em; font-weight: bold; color: #348ECC; margin-bottom: 10px; border-bottom: 1px solid #ddd; padding-bottom: 5px; }
                table { width: 100%; border-collapse: collapse; margin-bottom: 15px; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                th { background: #f8f9fa; font-weight: bold; }
                .status-ok { color: #28a745; }
                .status-recommendation { color: #ffc107; }
                .status-replacement { color: #dc3545; }
                @media print { body { margin: 0; } }
              </style>
            </head>
            <body>
              <div class="header">
                <h1>–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –õ–ò–°–¢</h1>
                <h2>–ó–∞–∫–∞–∑ ‚Ññ${order.orderNumber}</h2>
              </div>
              
              <div class="order-info">
                <div><strong>–î–∞—Ç–∞:</strong> ${order.date}</div>
                <div><strong>–ö–ª–∏–µ–Ω—Ç:</strong> ${order.client}</div>
                <div><strong>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</strong> ${order.contacts}</div>
                <div><strong>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</strong> ${order.car}</div>
                <div><strong>VIN:</strong> ${order.vin || '-'}</div>
                <div><strong>–ì–æ—Å–Ω–æ–º–µ—Ä:</strong> ${order.regnum || '-'}</div>
                <div><strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</strong> ${order.executor}</div>
                <div><strong>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</strong> ${order.completedAt ? new Date(order.completedAt).toLocaleString() : '-'}</div>
              </div>

              <div class="section">
                <div class="section-title">–¢–∏–ø—ã –ø–æ–¥–≤–µ—Å–∫–∏</div>
                <div><strong>–ü–µ—Ä–µ–¥–Ω—è—è –ø–æ–¥–≤–µ—Å–∫–∞:</strong> ${order.frontSuspensionType || '-'}</div>
                <div><strong>–ó–∞–¥–Ω—è—è –ø–æ–¥–≤–µ—Å–∫–∞:</strong> ${order.rearSuspensionType || '-'}</div>
              </div>

              <div class="section">
                <div class="section-title">–ü–µ—Ä–µ–¥–Ω—è—è –ø–æ–¥–≤–µ—Å–∫–∞</div>
                <table>
                  <thead>
                    <tr>
                      <th>–ü–∞—Ä–∞–º–µ—Ç—Ä</th>
                      <th>–õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞</th>
                      <th>–ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞</th>
                      <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${getFrontSuspensionRows(orderDiag)}
                  </tbody>
                </table>
              </div>

              <div class="section">
                <div class="section-title">–ó–∞–¥–Ω—è—è –ø–æ–¥–≤–µ—Å–∫–∞</div>
                <table>
                  <thead>
                    <tr>
                      <th>–ü–∞—Ä–∞–º–µ—Ç—Ä</th>
                      <th>–õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞</th>
                      <th>–ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞</th>
                      <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${getRearSuspensionRows(orderDiag)}
                  </tbody>
                </table>
              </div>

              <div class="section">
                <div class="section-title">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∂–∏–¥–∫–æ—Å—Ç–∏</div>
                <div>–£—Ä–æ–≤–µ–Ω—å –º–∞—Å–ª–∞ –î–í–°: ${orderDiag.oil === 'on' ? '‚úÖ –ù–æ—Ä–º–∞' : '‚ùå –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}</div>
                <div>–¢–æ—Ä–º–æ–∑–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å: ${orderDiag.brake === 'on' ? '‚úÖ –ù–æ—Ä–º–∞' : '‚ùå –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}</div>
                <div>–ñ–∏–¥–∫–æ—Å—Ç—å –ì–£–†: ${orderDiag.gur === 'on' ? '‚úÖ –ù–æ—Ä–º–∞' : '‚ùå –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}</div>
                <div>–ê–Ω—Ç–∏—Ñ—Ä–∏–∑: ${orderDiag.antifreeze === 'on' ? '‚úÖ –ù–æ—Ä–º–∞' : '‚ùå –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}</div>
              </div>

              ${orderDiag.special_notes ? `
                <div class="section">
                  <div class="section-title">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏</div>
                  <p>${orderDiag.special_notes}</p>
                </div>
              ` : ''}

              ${orderDiag.signature ? `
                <div class="section">
                  <div class="section-title">–ü–æ–¥–ø–∏—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</div>
                  <p>${orderDiag.signature}</p>
                </div>
              ` : ''}

              <div style="margin-top: 40px; text-align: center; font-size: 0.9em; color: #666;">
                –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–∏—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω ${new Date().toLocaleString()}
              </div>
            </body>
          </html>
        `);
        printWindow.document.close();
        printWindow.print();
      }
    } else {
      alert('‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞');
    }
  }

  function getStatusLabel(status: Order['status']) {
    switch (status) {
      case 'pending': return '‚è≥ –û–∂–∏–¥–∞–µ—Ç';
      case 'in_progress': return 'üîß –í —Ä–∞–±–æ—Ç–µ';
      case 'completed': return '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω';
    }
  }

  function getStatusColor(status: Order['status']) {
    switch (status) {
      case 'pending': return '#ff6900';
      case 'in_progress': return '#348ECC';
      case 'completed': return '#28a745';
    }
  }

  const activeOrders = orders.filter(o => o.status !== 'completed');
  const completedOrders = orders.filter(o => o.status === 'completed');

  return (
    <div style={{ minHeight: '100vh', background: '#f8f9fa' }}>
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö */}
      {showNotification && (
        <div style={{
          position: 'fixed',
          top: '20px',
          right: '20px',
          background: '#28a745',
          color: '#fff',
          padding: '16px 20px',
          borderRadius: '12px',
          boxShadow: '0 8px 24px rgba(40, 167, 69, 0.4)',
          zIndex: 1000,
          animation: 'slideIn 0.3s ease-out',
          maxWidth: '350px'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
            <div style={{ fontSize: '1.5rem' }}>üìã</div>
            <div>
              <div style={{ fontWeight: '600', marginBottom: '4px' }}>
                –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
              </div>
              <div style={{ fontSize: '0.9rem', opacity: 0.9 }}>
                –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {completedOrdersCount}
              </div>
              <button
                onClick={() => setActiveTab('completed')}
                style={{
                  marginTop: '8px',
                  padding: '4px 8px',
                  background: 'rgba(255,255,255,0.3)',
                  border: 'none',
                  borderRadius: '4px',
                  color: '#fff',
                  cursor: 'pointer',
                  fontSize: '0.8rem'
                }}
              >
                –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–µ—á–∞—Ç–∏ ‚Üí
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Header */}
      <header style={{
        background: 'linear-gradient(135deg, #348ECC 0%, #1B80C5 100%)',
        color: '#fff',
        padding: '16px 24px',
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
      }}>
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          maxWidth: '1200px',
          margin: '0 auto'
        }}>
          <h1 style={{
            margin: 0,
            fontSize: '1.5rem',
            fontWeight: '700',
            fontFamily: 'Montserrat, sans-serif'
          }}>
            üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
          </h1>
          
          <button
            onClick={onBackToRoles}
            style={{
              padding: '8px 16px',
              background: 'rgba(255,255,255,0.2)',
              border: 'none',
              borderRadius: '6px',
              color: '#fff',
              cursor: 'pointer',
              fontSize: '0.9rem'
            }}
          >
            ‚Üê –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å
          </button>
        </div>
      </header>

      <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '24px' }}>
        {/* Tabs */}
        <div style={{
          display: 'flex',
          gap: '8px',
          marginBottom: '24px',
          borderBottom: '2px solid #eee'
        }}>
          <button
            onClick={() => setActiveTab('create')}
            style={{
              padding: '12px 24px',
              border: 'none',
              background: activeTab === 'create' ? '#348ECC' : 'transparent',
              color: activeTab === 'create' ? '#fff' : '#666',
              borderRadius: '8px 8px 0 0',
              cursor: 'pointer',
              fontSize: '1rem',
              fontWeight: '600',
              transition: 'all 0.2s'
            }}
          >
            üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
          </button>
          
          <button
            onClick={() => setActiveTab('orders')}
            style={{
              padding: '12px 24px',
              border: 'none',
              background: activeTab === 'orders' ? '#348ECC' : 'transparent',
              color: activeTab === 'orders' ? '#fff' : '#666',
              borderRadius: '8px 8px 0 0',
              cursor: 'pointer',
              fontSize: '1rem',
              fontWeight: '600',
              transition: 'all 0.2s'
            }}
          >
            üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã ({activeOrders.length})
          </button>

          <button
            onClick={() => setActiveTab('completed')}
            style={{
              padding: '12px 24px',
              border: 'none',
              background: activeTab === 'completed' ? '#28a745' : 'transparent',
              color: activeTab === 'completed' ? '#fff' : '#666',
              borderRadius: '8px 8px 0 0',
              cursor: 'pointer',
              fontSize: '1rem',
              fontWeight: '600',
              transition: 'all 0.2s',
              position: 'relative'
            }}
          >
            üñ®Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ ({completedOrders.length})
            {completedOrders.some(o => !o.completedAt || new Date(o.completedAt).getTime() > Date.now() - 300000) && (
              <span style={{
                position: 'absolute',
                top: '-5px',
                right: '-5px',
                background: '#dc3545',
                color: '#fff',
                borderRadius: '50%',
                width: '20px',
                height: '20px',
                fontSize: '0.7rem',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                !
              </span>
            )}
          </button>
        </div>

        {/* Create Order Tab */}
        {activeTab === 'create' && (
          <div style={{
            background: '#fff',
            borderRadius: '12px',
            padding: '32px',
            boxShadow: '0 4px 16px rgba(0,0,0,0.1)'
          }}>
            <h2 style={{
              margin: '0 0 24px 0',
              color: '#348ECC',
              fontSize: '1.5rem',
              fontWeight: '700'
            }}>
              –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
            </h2>

            <form ref={formRef} onSubmit={handleCreateOrder}>
              {/* –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
                gap: '20px',
                marginBottom: '32px'
              }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>
                    –î–∞—Ç–∞ *
                    <input
                      type="date"
                      name="date"
                      required
                      defaultValue={new Date().toISOString().split('T')[0]}
                      style={{
                        width: '100%',
                        padding: '12px',
                        border: '2px solid #ddd',
                        borderRadius: '8px',
                        fontSize: '1rem',
                        marginTop: '4px'
                      }}
                    />
                  </label>
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>
                    –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ *
                    <input
                      type="text"
                      name="client"
                      required
                      placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                      style={{
                        width: '100%',
                        padding: '12px',
                        border: '2px solid #ddd',
                        borderRadius: '8px',
                        fontSize: '1rem',
                        marginTop: '4px'
                      }}
                    />
                  </label>
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>
                    –ö–æ–Ω—Ç–∞–∫—Ç—ã *
                    <input
                      type="text"
                      name="contacts"
                      required
                      placeholder="+7 (900) 123-45-67"
                      style={{
                        width: '100%',
                        padding: '12px',
                        border: '2px solid #ddd',
                        borderRadius: '8px',
                        fontSize: '1rem',
                        marginTop: '4px'
                      }}
                    />
                  </label>
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>
                    VIN
                    <input
                      type="text"
                      name="vin"
                      placeholder="1HGBH41JXMN109186"
                      style={{
                        width: '100%',
                        padding: '12px',
                        border: '2px solid #ddd',
                        borderRadius: '8px',
                        fontSize: '1rem',
                        marginTop: '4px'
                      }}
                    />
                  </label>
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>
                    –ì–æ—Å–Ω–æ–º–µ—Ä
                    <input
                      type="text"
                      name="regnum"
                      placeholder="–ê123–ë–í199"
                      style={{
                        width: '100%',
                        padding: '12px',
                        border: '2px solid #ddd',
                        borderRadius: '8px',
                        fontSize: '1rem',
                        marginTop: '4px'
                      }}
                    />
                  </label>
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>
                    –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å *
                    <select
                      name="executor"
                      required
                      style={{
                        width: '100%',
                        padding: '12px',
                        border: '2px solid #ddd',
                        borderRadius: '8px',
                        fontSize: '1rem',
                        marginTop: '4px'
                      }}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</option>
                      {executors.map(executor => (
                        <option key={executor} value={executor}>{executor}</option>
                      ))}
                    </select>
                  </label>
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>
                    –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ *
                    <input
                      type="text"
                      name="orderNumber"
                      required
                      placeholder={`ORD-${Date.now().toString().slice(-6)}`}
                      style={{
                        width: '100%',
                        padding: '12px',
                        border: '2px solid #ddd',
                        borderRadius: '8px',
                        fontSize: '1rem',
                        marginTop: '4px'
                      }}
                    />
                  </label>
                </div>
              </div>

              {/* –í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è */}
              <div style={{
                border: '2px solid #348ECC',
                borderRadius: '12px',
                padding: '24px',
                marginBottom: '32px',
                background: '#f8f9fa'
              }}>
                <h3 style={{
                  margin: '0 0 20px 0',
                  color: '#348ECC',
                  fontSize: '1.3rem',
                  fontWeight: '600'
                }}>
                  üöó –í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ —Ç–∏–ø–∞ –ø–æ–¥–≤–µ—Å–∫–∏
                </h3>
                <CarSelector 
                  onCarSelect={handleCarSelect}
                  initialCar={carData.car}
                  initialFrontSuspension={carData.frontSuspensionType}
                  initialRearSuspension={carData.rearSuspensionType}
                />
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
              <button
                type="submit"
                style={{
                  width: '100%',
                  padding: '16px',
                  fontSize: '1.2rem',
                  fontWeight: '600',
                  color: '#fff',
                  background: 'linear-gradient(135deg, #28a745 0%, #20c997 100%)',
                  border: 'none',
                  borderRadius: '12px',
                  cursor: 'pointer',
                  transition: 'all 0.2s ease',
                  boxShadow: '0 4px 16px rgba(40, 167, 69, 0.3)'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = 'translateY(-2px)';
                  e.currentTarget.style.boxShadow = '0 8px 24px rgba(40, 167, 69, 0.4)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = 'translateY(0)';
                  e.currentTarget.style.boxShadow = '0 4px 16px rgba(40, 167, 69, 0.3)';
                }}
              >
                üîî –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
              </button>
            </form>
          </div>
        )}

        {/* Active Orders Tab */}
        {activeTab === 'orders' && (
          <div style={{
            background: '#fff',
            borderRadius: '12px',
            padding: '32px',
            boxShadow: '0 4px 16px rgba(0,0,0,0.1)'
          }}>
            <h2 style={{
              margin: '0 0 24px 0',
              color: '#348ECC',
              fontSize: '1.5rem',
              fontWeight: '700'
            }}>
              –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            </h2>

            {activeOrders.length === 0 ? (
              <div style={{
                textAlign: 'center',
                padding: '48px 0',
                color: '#666'
              }}>
                <div style={{ fontSize: '3rem', marginBottom: '16px' }}>üìã</div>
                <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</p>
                <button
                  onClick={() => setActiveTab('create')}
                  style={{
                    marginTop: '16px',
                    padding: '12px 24px',
                    background: '#348ECC',
                    color: '#fff',
                    border: 'none',
                    borderRadius: '8px',
                    cursor: 'pointer'
                  }}
                >
                  –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
                </button>
              </div>
            ) : (
              <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                {activeOrders.map(order => (
                  <div
                    key={order.id}
                    style={{
                      border: '2px solid #eee',
                      borderRadius: '12px',
                      padding: '20px',
                      background: '#fff',
                      transition: 'all 0.2s'
                    }}
                  >
                    <div style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      marginBottom: '12px'
                    }}>
                      <h3 style={{
                        margin: 0,
                        color: '#333',
                        fontSize: '1.2rem'
                      }}>
                        –ó–∞–∫–∞–∑ #{order.orderNumber}
                      </h3>
                      
                      <span style={{
                        padding: '6px 12px',
                        borderRadius: '20px',
                        fontSize: '0.9rem',
                        fontWeight: '600',
                        background: getStatusColor(order.status),
                        color: '#fff'
                      }}>
                        {getStatusLabel(order.status)}
                      </span>
                    </div>

                    <div style={{
                      display: 'grid',
                      gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                      gap: '12px',
                      fontSize: '0.95rem',
                      color: '#666'
                    }}>
                      <div><strong>–ö–ª–∏–µ–Ω—Ç:</strong> {order.client}</div>
                      <div><strong>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</strong> {order.car}</div>
                      <div><strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</strong> {order.executor}</div>
                      <div><strong>–î–∞—Ç–∞:</strong> {order.date}</div>
                      <div><strong>–°–æ–∑–¥–∞–Ω:</strong> {new Date(order.created).toLocaleString()}</div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Completed Orders Tab */}
        {activeTab === 'completed' && (
          <div style={{
            background: '#fff',
            borderRadius: '12px',
            padding: '32px',
            boxShadow: '0 4px 16px rgba(0,0,0,0.1)'
          }}>
            <h2 style={{
              margin: '0 0 24px 0',
              color: '#28a745',
              fontSize: '1.5rem',
              fontWeight: '700'
            }}>
              üñ®Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã - –ì–æ—Ç–æ–≤—ã –∫ –ø–µ—á–∞—Ç–∏
            </h2>

            {completedOrders.length === 0 ? (
              <div style={{
                textAlign: 'center',
                padding: '48px 0',
                color: '#666'
              }}>
                <div style={{ fontSize: '3rem', marginBottom: '16px' }}>üìã</div>
                <p>–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</p>
              </div>
            ) : (
              <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                {completedOrders.map(order => (
                  <div
                    key={order.id}
                    style={{
                      border: '2px solid #28a745',
                      borderRadius: '12px',
                      padding: '20px',
                      background: '#f8fff8',
                      transition: 'all 0.2s'
                    }}
                  >
                    <div style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      marginBottom: '12px'
                    }}>
                      <h3 style={{
                        margin: 0,
                        color: '#333',
                        fontSize: '1.2rem'
                      }}>
                        –ó–∞–∫–∞–∑ #{order.orderNumber}
                      </h3>
                      
                      <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
                        <span style={{
                          padding: '6px 12px',
                          borderRadius: '20px',
                          fontSize: '0.9rem',
                          fontWeight: '600',
                          background: '#28a745',
                          color: '#fff'
                        }}>
                          ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω
                        </span>
                        
                        <button
                          onClick={() => handlePrintDiagnostics(order)}
                          style={{
                            padding: '8px 16px',
                            background: '#17a2b8',
                            color: '#fff',
                            border: 'none',
                            borderRadius: '8px',
                            cursor: 'pointer',
                            fontWeight: '600',
                            fontSize: '0.9rem'
                          }}
                        >
                          üñ®Ô∏è –ü–µ—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        </button>
                      </div>
                    </div>

                    <div style={{
                      display: 'grid',
                      gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                      gap: '12px',
                      fontSize: '0.95rem',
                      color: '#666'
                    }}>
                      <div><strong>–ö–ª–∏–µ–Ω—Ç:</strong> {order.client}</div>
                      <div><strong>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</strong> {order.car}</div>
                      <div><strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</strong> {order.executor}</div>
                      <div><strong>–î–∞—Ç–∞:</strong> {order.date}</div>
                      <div><strong>–ó–∞–≤–µ—Ä—à–µ–Ω:</strong> {order.completedAt ? new Date(order.completedAt).toLocaleString() : '–ù–µ–¥–∞–≤–Ω–æ'}</div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>

      <style>{`
        @keyframes slideIn {
          from {
            transform: translateX(100%);
            opacity: 0;
          }
          to {
            transform: translateX(0);
            opacity: 1;
          }
        }
      `}</style>
    </div>
  );
} 